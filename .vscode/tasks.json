{
    // See https://go.microsoft.com/fwlink/?LinkId=733558
    // for the documentation about the tasks.json format
    "version": "2.0.0",
    "tasks": [
        {
            "label": "evaluate",
            "detail": "Evaluate ros pipeline on dataset.",
            "type": "shell",
            "command":"source install/setup.bash && python3 script/evaluate.py --sequence_id ${input:sequence_id} --experiment_name ${input:experiment_name}",
            "problemMatcher": []

        },
        {
            "label": "compute kpis",
            "detail": "Compute kpis on existing algorithm log",
            "type": "shell",
            "command":"python3 ${workspaceFolder}/src/vslam/script/vslampy/evaluation/evaluation.py --sequence_id ${input:sequence_id} --experiment_name ${input:experiment_name}",
            "problemMatcher": []

        },
        {
            "label": "upload kpis",
            "detail": "Compute kpis on existing algorithm log",
            "type": "shell",
            "command":"python3 ${workspaceFolder}/src/vslam/script/vslampy/evaluation/evaluation.py --sequence_id ${input:sequence_id} --experiment_name ${input:experiment_name} --upload",
            "problemMatcher": []

        },
        {
            "label": "build",
            "detail": "Build workspace (default)",
            "type": "shell",
            "command": "colcon build --symlink-install --event-handler console_direct+ --cmake-args -DCMAKE_BUILD_TYPE=${input:build_type} -DCMAKE_EXPORT_COMPILE_COMMANDS=On -DBUILD_TESTING=${input:build_testing} -Wall -Wextra -Wpedantic",
            "problemMatcher": "$gcc",
            "group": {
                "kind": "build",
                "isDefault": true
            }
        },
        {
            "label": "build_app",
            "command":"cd ${workspaceFolder}/build/vslam_ros/src/vslam/ && make -j4",
            "type": "shell",
            "problemMatcher": "$gcc",
            "group": {
                "kind": "build",
            }
        },
        {
            "label": "build_vslam",
            "command":"cd ${workspaceFolder}/build/vslam_ros/src/vslam && make ${input:test} -j4",
            "type": "shell",
            "problemMatcher": "$gcc",
            "group": {
                "kind": "build",
            }
        },
        {
            "label": "test",
            "detail": "Run all unit tests and show results.",
            "type": "shell",
            "command": "colcon test --event-handler console_direct+; colcon test-result",
            "group": "build",
            "problemMatcher": []
        },
        {
            "label": "clean",
            "detail": "Run the clean target",
            "type": "shell",
            "command": "colcon build --cmake-target clean",
            "problemMatcher": "$gcc"
        },
        {
            "label": "purge",
            "detail": "Purge workspace by deleting all generated files.",
            "type": "shell",
            "command": "rm -fr build install log; py3clean .",
            "problemMatcher": []
        },
        {
            "label": "fix",
            "detail": "Reformat files with uncrustify.",
            "type": "shell",
            "command": "ament_uncrustify --reformat src/",
            "problemMatcher": []
        },
        {
            "label": "uncrustify",
            "detail": "Lint files with uncrustify.",
            "type": "shell",
            "command": "ament_uncrustify src/",
            "presentation": {
                "panel": "dedicated",
                "reveal": "silent",
                "clear": true
            },
            "problemMatcher": [
                {
                    "owner": "uncrustify",
                    "source": " uncrustify",
                    "fileLocation": "relative",
                    "pattern": [
                        {
                            "regexp": "^(.*)'(.*)':",
                            "kind": "file",
                            "file": 2,
                            "message": 1
                        }
                    ]
                }
            ]
        },
        {
            "label": "cpplint",
            "detail": "Lint files with cpplint.",
            "type": "shell",
            "command": "ament_cpplint src/",
            "presentation": {
                "panel": "dedicated",
                "reveal": "silent",
                "clear": true
            },
            "problemMatcher": [
                {
                    "owner": "cpplint",
                    "source": " cpplint",
                    "fileLocation": "absolute",
                    "pattern": [
                        {
                            "regexp": "^(.+):(\\d+):\\s+(.+)\\[(.+)\\]$",
                            "file": 1,
                            "line": 2,
                            "message": 3,
                            "code": 4
                        }
                    ]
                }
            ]
        },
        {
            "label": "cppcheck",
            "detail": "Run static code checker cppcheck.",
            "type": "shell",
            "command": "ament_cppcheck src/ --language c++",
            "presentation": {
                "panel": "dedicated",
                "reveal": "silent",
                "clear": true
            },
            "problemMatcher": [
                {
                    "owner": "cppcheck",
                    "source": "cppcheck",
                    "pattern": [
                        {
                            "regexp": "^\\[(.+):(\\d+)\\]:\\s+(.+)$",
                            "file": 1,
                            "line": 2,
                            "message": 3
                        }
                    ]
                }
            ]
        },
        {
            "label": "lint_cmake",
            "detail": "Run lint on cmake files.",
            "type": "shell",
            "command": "ament_lint_cmake src/",
            "presentation": {
                "panel": "dedicated",
                "reveal": "silent",
                "clear": true
            },
            "problemMatcher": [
                {
                    "owner": "lint_cmake",
                    "source": "lint_cmake",
                    "pattern": [
                        {
                            "regexp": "^(.+):(\\d+):\\s+(.+)$",
                            "file": 1,
                            "line": 2,
                            "message": 3
                        }
                    ]
                }
            ]
        },
        {
            "label": "flake8",
            "detail": "Run flake8 on python files.",
            "type": "shell",
            "command": "ament_flake8",
            "presentation": {
                "panel": "dedicated",
                "reveal": "silent",
                "clear": true
            },
            "problemMatcher": [
                {
                    "owner": "flake8",
                    "source": "flake8",
                    "pattern": [
                        {
                            "code": 4,
                            "column": 3,
                            "file": 1,
                            "line": 2,
                            "message": 5,
                            "regexp": "^(.+):(\\d+):(\\d+): (\\w\\d+) (.+)$"
                        }
                    ]
                }
            ]
        },
        {
            "label": "pep257",
            "detail": "Run pep257 on python files.",
            "type": "shell",
            "command": "ament_pep257 src/",
            "presentation": {
                "panel": "dedicated",
                "reveal": "silent",
                "clear": true
            },
            "problemMatcher": [
                {
                    "owner": "pep257",
                    "source": "pep257",
                    "pattern": [
                        {
                            "regexp": "^(.+):(\\d+)\\s+(.+):\\s+(.+):\\s+(.+)$",
                            "file": 1,
                            "line": 2,
                            "code": 4,
                            "message": 5
                        }
                    ]
                }
            ]
        },
        {
            "label": "xmllint",
            "detail": "Run xmllint on xml files.",
            "type": "shell",
            "command": "ament_xmllint src/",
            "presentation": {
                "panel": "dedicated",
                "reveal": "silent",
                "clear": true
            },
            "problemMatcher": [
                {
                    "owner": "xmllint",
                    "source": "xmllint",
                    "fileLocation": "absolute",
                    "pattern": [
                        {
                            "regexp": "^(.+):(\\d+):\\s+(.+)\\s+:\\s+(.+)$",
                            "file": 1,
                            "line": 2,
                            "code": 3,
                            "message": 4
                        }
                    ]
                }
            ]
        },
        {
            "label": "lint all",
            "detail": "Run all linters.",
            "dependsOn": [
                "cppcheck",
                "cpplint",
                "flake8",
                "lint_cmake",
                "pep257",
                "xmllint",
                "uncrustify"
            ],
            "problemMatcher": []
        },
        {
            "label": "new ament_cmake package",
            "detail": "Create a new ROS cpp package from a template.",
            "type": "shell",
            "command": "ros2 pkg create --destination-directory src --build-type ament_cmake ${input:package}",
            "problemMatcher": []
        },
        {
            "label": "new ament_python package",
            "detail": "Create a new ROS python package from a template.",
            "type": "shell",
            "command": "ros2 pkg create --destination-directory src --build-type ament_python ${input:package}",
            "problemMatcher": []
        },
        {
            "label": "import from workspace file",
            "detail": "Use vcs to import modules specified by a workspace/rosinstall file.",
            "type": "shell",
            "command": "vcs import < src/ros2.repos src",
            "problemMatcher": []
        },
        {
            "label": "update workspace file",
            "detail": "Use vcs to update repositories in src to workspace file.",
            "type": "shell",
            "command": "vcs export src > src/ros2.repos",
            "problemMatcher": []
        },
        {
            "label": "install dependencies",
            "detail": "Install all dependencies specified in the workspaces package.xml files.",
            "type": "shell",
            "command": "sudo apt-get update && rosdep update && rosdep install --from-paths src --ignore-src -y",
            "problemMatcher": []
        }
    ],
    "inputs": [
        {
            "id": "package",
            "type": "promptString",
            "description": "Package name"
        },
        {
            "id": "target",
            "type": "pickString",
            "description": "Package",
            "options": [
                "vslam_ros",
            ]
        },
        {
            "id": "sequence_id",
            "type": "pickString",
            "description": "sequence",
            "options": [
                "rgbd_dataset_freiburg1_desk",
                "rgbd_dataset_freiburg1_desk_validation",
                "rgbd_dataset_freiburg1_desk2",
                "rgbd_dataset_freiburg1_desk2_validation",
                "rgbd_dataset_freiburg1_floor",
                "rgbd_dataset_freiburg1_rpy",
                "rgbd_dataset_freiburg1_xyz",
                "rgbd_dataset_freiburg1_360",
                "rgbd_dataset_freiburg2_desk",
                "rgbd_dataset_freiburg2_desk_validation",
                "rgbd_dataset_freiburg2_pioneer_360",
                "rgbd_dataset_freiburg2_pioneer_slam",
                "rgbd_dataset_freiburg3_long_office_household",
                "00"
            ]
        },
        {
            "id": "experiment_name",
            "type": "promptString",
            "description": "name of experiment",
            "default": "test-ros"
        },
        {
            "id": "build_type",
            "type": "pickString",
            "description": "build type",
            "options": [
                "RelWithDebInfo",
                "Release",
                "Debug"
            ]
        },
        {
            "id": "build_testing",
            "type": "pickString",
            "description": "build tests",
            "options": [
                "ON",
                "OFF"
            ],
            "default": "ON"
        },{
            "id": "test",
            "type": "pickString",
            "description": "vslam unit test",
            "options":[
                "frame2Test",
                "rgbd_alignmentTest",
                "rpeTest",
                "motion_modelTest",
                "ekf_se3Test",
                "trackingTest",
              "trajectoryTest",
              "mapTest",
              "frameTest",
            ]
          },
    ]
}